<!doctype html>
<html lang="de">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>LC Hub – Zentrale Moderationsmaske</title>
<style>
  :root { --bg:#0f1220; --fg:#eef1ff; --muted:#a8b0d6; --card:#181c2f; --accent:#7aa2ff; }
  *{box-sizing:border-box} body{margin:0;background:var(--bg);color:var(--fg);font:14px/1.45 system-ui,Segoe UI,Roboto,Helvetica,Arial}
  .app{display:grid;grid-template-columns:280px 1fr 300px; gap:12px; height:100vh; padding:12px}
  .col{background:var(--card);border-radius:14px;overflow:auto;box-shadow:0 6px 18px rgba(0,0,0,.35)}
  h2{margin:12px 14px;font-size:16px;color:var(--muted)}
  .queue{padding:8px}
  .item{padding:10px 12px;border-radius:12px;margin:8px;background:#101325;cursor:pointer;border:1px solid transparent}
  .item:hover{border-color:var(--accent)}
  .item .meta{display:flex;gap:6px;align-items:center;color:var(--muted);font-size:12px}
  .item .preview{margin-top:6px;color:#dfe4ff}
  .chat{display:flex;flex-direction:column;height:100%}
  .chat-body{flex:1;overflow:auto;padding:16px}
  .bubble{max-width:72%;padding:10px 12px;border-radius:14px;margin:6px 0;word-wrap:break-word;white-space:pre-wrap}
  .me{margin-left:auto;background:#23315b}
  .them{margin-right:auto;background:#222638}
  .chat-input{display:flex;gap:8px;padding:12px;border-top:1px solid #232844}
  textarea{flex:1;min-height:46px;max-height:160px;padding:10px;border-radius:10px;border:1px solid #2a3156;background:#0f1428;color:var(--fg);resize:vertical}
  button{background:var(--accent);color:#0b1022;border:0;border-radius:10px;padding:10px 14px;font-weight:600;cursor:pointer}
  .right{padding:12px}
  .row{display:grid;grid-template-columns:100px 1fr; gap:8px; padding:6px 0; border-bottom:1px dashed #2b3157}
  .pill{display:inline-block;padding:4px 8px;border-radius:999px;background:#222a4a;color:var(--muted);margin-right:6px}
  .topbar{display:flex;align-items:center;gap:10px;padding:10px;border-bottom:1px solid #232844}
  .status{width:10px;height:10px;border-radius:50%;background:#666}
  .status.ok{background:#42d392}
  .small{color:var(--muted);font-size:12px}
</style>
</head>
<body>
<div class="app">
  <!-- Liste / Queue -->
  <div class="col">
    <div class="topbar">
      <div class="status" id="status"></div>
      <div><strong>Verbindungen</strong> <span class="small" id="conCount">(0)</span></div>
      <div class="small" style="margin-left:auto">F5 = neu verbinden</div>
    </div>
    <h2>Eingang</h2>
    <div class="queue" id="queue"></div>
  </div>

  <!-- Chat -->
  <div class="col chat">
    <div class="topbar"><strong id="threadTitle">–</strong><span class="small" id="originLabel" style="margin-left:8px;color:#a0a9d9"></span></div>
    <div class="chat-body" id="chatBody"></div>
    <div class="chat-input">
      <textarea id="reply" placeholder="Antwort schreiben… (Enter = senden, Shift+Enter = Zeilenumbruch)"></textarea>
      <button id="sendBtn">Senden</button>
    </div>
  </div>

  <!-- Rechts Infos -->
  <div class="col right">
    <h2>Details</h2>
    <div id="details"></div>
  </div>
</div>

<script>
/** Zentrale Datenhaltung **/
const store = {
  // key = threadId; value = { profile, customer, messages:[], lastAt, sourceWindow, sourceId }
  threads: new Map(),
  // Quellfenster: sourceId -> Window
  sources: new Map(),
  selected: null
};

const els = {
  queue: document.getElementById('queue'),
  chatBody: document.getElementById('chatBody'),
  reply: document.getElementById('reply'),
  sendBtn: document.getElementById('sendBtn'),
  details: document.getElementById('details'),
  conCount: document.getElementById('conCount'),
  status: document.getElementById('status'),
  threadTitle: document.getElementById('threadTitle'),
  originLabel: document.getElementById('originLabel')
};

function fmtTime(ts){const d=new Date(ts);return d.toLocaleTimeString([], {hour:'2-digit',minute:'2-digit'})}

/** Rendering **/
function renderQueue(){
  els.queue.innerHTML = '';
  // sort by lastAt desc
  const list = [...store.threads.values()].sort((a,b)=>b.lastAt-a.lastAt);
  for(const t of list){
    const div = document.createElement('div');
    div.className = 'item';
    div.dataset.tid = t.threadId;
    div.innerHTML = `
      <div class="meta">
        <span class="pill">${t.profile}</span>
        <strong>${t.customer}</strong>
        <span class="small" style="margin-left:auto">${fmtTime(t.lastAt)}</span>
      </div>
      <div class="preview">${(t.messages.at(-1)?.text||'').slice(0,160)}</div>
    `;
    div.onclick = ()=>selectThread(t.threadId);
    els.queue.appendChild(div);
  }
}

function renderChat(t){
  els.chatBody.innerHTML = '';
  if(!t){ els.threadTitle.textContent = '–'; els.originLabel.textContent=''; return; }
  els.threadTitle.textContent = `${t.customer}`;
  els.originLabel.textContent = `von: ${t.profile}`;
  for(const m of t.messages){
    const b = document.createElement('div');
    b.className = `bubble ${m.from==='me'?'me':'them'}`;
    b.textContent = `[${fmtTime(m.at)}] ${m.text}`;
    els.chatBody.appendChild(b);
  }
  els.chatBody.scrollTop = els.chatBody.scrollHeight;
  els.details.innerHTML = `
    <div class="row"><div>Profil</div><div>${t.profile}</div></div>
    <div class="row"><div>Kunde</div><div>${t.customer}</div></div>
    <div class="row"><div>Thread-ID</div><div>${t.threadId}</div></div>
    <div class="row"><div>Quelle</div><div>${t.sourceId||'–'}</div></div>
  `;
}

function selectThread(id){
  store.selected = id;
  renderChat(store.threads.get(id) || null);
}

function addMessage(payload, sourceWindow, sourceId){
  const { profile, customer, text, from, threadId, at } = payload;
  if(!store.sources.has(sourceId)) store.sources.set(sourceId, sourceWindow);
  let t = store.threads.get(threadId);
  if(!t){
    t = { threadId, profile, customer, messages:[], lastAt:Date.now(), sourceWindow, sourceId };
    store.threads.set(threadId, t);
  }
  t.messages.push({ text, from, at: at || Date.now() });
  t.lastAt = Date.now();
  renderQueue();
  if(store.selected === threadId) renderChat(t);
}

function sendReply(){
  const t = store.threads.get(store.selected);
  if(!t) return;
  const text = els.reply.value.trim();
  if(!text) return;
  els.reply.value = '';
  // lokal rendern
  t.messages.push({ text, from:'me', at: Date.now() });
  renderChat(t);

  // Antwort an den Ursprungstab senden
  const src = store.sources.get(t.sourceId);
  if(src && src.postMessage){
    src.postMessage({ type:'LC_SEND', threadId: t.threadId, text }, '*');
  } else {
    alert('Ursprungs-Tab nicht erreichbar. Bitte Tab aktualisieren.');
  }
}

els.sendBtn.onclick = sendReply;
els.reply.addEventListener('keydown', (e)=>{
  if(e.key==='Enter' && !e.shiftKey){ e.preventDefault(); sendReply(); }
});

/** Verbindungen / Heartbeat **/
let heartbeatOk = false;
setInterval(()=>{ els.status.classList.toggle('ok', heartbeatOk); heartbeatOk=false; }, 1500);

/** Nachrichten vom/zu Tabs **/
window.addEventListener('message', (event)=>{
  const msg = event.data || {};
  if(!msg.type) return;

  if(msg.type==='LC_HELLO'){
    // neue Quelle bekannt geben
    heartbeatOk=true;
    store.sources.set(msg.sourceId, event.source);
    els.conCount.textContent = `(${store.sources.size})`;
    // ack
    event.source.postMessage({ type:'LC_ACK', ack:true, hubTitle:document.title }, '*');
    return;
  }

  if(msg.type==='LC_PING'){
    heartbeatOk=true;
    return;
  }

  if(msg.type==='LC_MESSAGE'){
    heartbeatOk=true;
    addMessage(msg.payload, event.source, msg.sourceId);
    return;
  }
});

</script>
</body>
</html>

